import jetpack from 'fs-jetpack'
import { camelCase } from 'lodash'

const cwd = jetpack.cwd()
const output = `${cwd}/src/icon/icons.generated.tsx`

const assets = `${cwd}/src/icon/assets`

const fileNames = (jetpack.cwd(assets).list() || [])
  // remove non-svg files
  .filter(it => it.endsWith('.svg'))
  // remove .svg ext
  .map(it => it.replace('.svg', ''))

function getComponentName(raw: string) {
  return capitalizeFirstLetter(camelCase(raw))
}

function capitalizeFirstLetter(raw: string) {
  return raw.charAt(0).toUpperCase() + raw.slice(1)
}

const data = `
/**
 *
 * This file is autogenerated, any changes here will be overwrited by calling
 * yarn generate:icon
 *
 * **/

import React from 'react'
import { ViewStyle } from 'react-native'
import { Color, SvgProps } from 'react-native-svg'

${fileNames
  .map(file => `import ${getComponentName(file)} from './assets/${file}.svg'`)
  .join('\n')
  .trim()}

interface SVGRProps {
  strokeInverted?: Color
  fillInverted?: Color
}

interface Colors {
  color?: string
  stroke?: string
  colorInverted?: string
  strokeInverted?: string
}

export interface LogoProps extends Colors {
  height?: number
  width?: number | string
  style?: ViewStyle & Colors
}

function icon(Logo: React.FC<SvgProps & SVGRProps>) {
  return function (props: LogoProps) {
    return (
      <Logo
        fill={props.color || props.style?.color}
        fillInverted={props.colorInverted}
        height={props.height || props.style?.height}
        stroke={props.stroke || props.style?.stroke}
        strokeInverted={props.strokeInverted}
        style={props.style}
        width={props.width || props.style?.width}
      />
    )
  }
}

export const svgIcons = {
${fileNames.map(file => `  ${getComponentName(file)}: icon(${getComponentName(file)})`).join(',\n')},
}
`
  .trim()
  .concat('\n')

jetpack.write(output, data)
